{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"어바웃 String"},"fields":{"index":"{\"title\":\"어바웃 String\",\"content\":\"\\r\\n### 프로퍼티\\r\\n\\r\\n- String.length <br/> 문자열 내의 문자 갯수를 반환 = `내용`과 `길이`를 소유하고 있으니 `유사 배열 객체`이다.\\r\\n\\r\\n```javascript\\r\\nconst str = 'hello'\\r\\nconsole.log(str.length) // 5\\r\\n```\\r\\n\\r\\n| String.fromCharCode() | 쉼표로 구분되는 일련의 유니코드에 해당하는 문자들로 구성된 문자열을 반환함. |\\r\\n| --- | --- |\\r\\n| String.fromCodePoint() | 쉼표로 구분되는 일련의 코드 포인트(code point)에 해당하는 문자들로 구성된 문자열을 반환함. |\\r\\n| String.raw() | 템플릿 문자열(template string)의 원형을 반환함. |\\r\\n| indexOf() | String 인스턴스에서 특정 문자나 문자열이 처음으로 등장하는 위치의 인덱스를 반환함. |\\r\\n| lastIndexOf() | String 인스턴스에서 특정 문자나 문자열이 마지막으로 등장하는 위치의 인덱스를 반환함. |\\r\\n| charAt() | String 인스턴스에서 전달받은 인덱스에 위치한 문자를 반환함. |\\r\\n| charCodeAt() | String 인스턴스에서 전달받은 인덱스에 위치한 문자의 UTF-16 코드를 반환함. (0 ~ 65535) |\\r\\n| charPointAt() | String 인스턴스에서 전달받은 인덱스에 위치한 문자의 유니코드 코드 포인트(unicode code point)를 반환함. |\\r\\n| slice() | String 인스턴스에서 전달받은 시작 인덱스부터 종료 인덱스 바로 앞까지의 문자열을 추출한 새 문자열을 반환함. |\\r\\n| substring() | String 인스턴스에서 전달받은 시작 인덱스부터 종료 인덱스 바로 앞까지의 문자열을 추출한 새 문자열을 반환함. |\\r\\n| substr() | String 인스턴스에서 전달받은 시작 인덱스부터 길이만큼의 문자열을 추출한 새로운 문자열을 반환함. |\\r\\n| split() | String 인스턴스에서 구분자(separator)를 기준으로 나눈 후, 나뉜 문자열을 하나의 배열로 반환함. |\\r\\n| concat() | String 인스턴스에 전달받은 문자열을 결합한 새로운 문자열을 반환함. |\\r\\n| toUpperCase() | String 인스턴스의 모든 문자를 대문자로 변환한 새로운 문자열을 반환함. |\\r\\n| toLowerCase() | String 인스턴스의 모든 문자를 소문자로 변환한 새로운 문자열을 반환함. |\\r\\n| trim() | String 인스턴스의 양 끝에 존재하는 공백과 모든 줄 바꿈 문자(LF, CR 등)를 제거한 새로운 문자열을 반환함. |\\r\\n| search() | 인수로 전달받은 정규 표현식에 맞는 문자나 문자열이 처음으로 등장하는 위치의 인덱스를 반환함. |\\r\\n| replace() | 인수로 전달받은 패턴에 맞는 문자열을 대체 문자열로 변환한 새 문자열을 반환함. |\\r\\n| match() | 인수로 전달받은 정규 표현식에 맞는 문자열을 찾아서 하나의 배열로 반환함. |\\r\\n| includes() | 인수로 전달받은 문자나 문자열이 포함되어 있는지를 검사한 후 그 결과를 불리언 값으로 반환함. |\\r\\n| startsWith() | 인수로 전달받은 문자나 문자열로 시작되는지를 검사한 후 그 결과를 불리언 값으로 반환함. |\\r\\n| endsWith() | 인수로 전달받은 문자나 문자열로 끝나는지를 검사한 후 그 결과를 불리언 값으로 반환함. |\\r\\n| toLocaleUpperCase() | 영문자뿐만 아니라 모든 언어의 문자를 대문자로 변환한 새로운 문자열을 반환함. |\\r\\n| toLocaleLowerCase() | 영문자뿐만 아니라 모든 언어의 문자를 소문자로 변환한 새로운 문자열을 반환함. |\\r\\n| localeCompare() | 인수로 전달받은 문자열과 정렬 순서로 비교하여 그 결과를 정수 값으로 반환함. |\\r\\n| normalize() | 해당 문자열의 유니코드 표준화 양식(Unicode Normalization Form)을 반환함. |\\r\\n| repeat() | 해당 문자열을 인수로 전달받은 횟수만큼 반복하여 결합한 새로운 문자열을 반환함. |\\r\\n| toString() | String 인스턴스의 값을 문자열로 반환함. |\\r\\n| valueOf() | String 인스턴스의 값을 문자열로 반환함. |\\r\\n\\r\\n<br>\\r\\n\\r\\n- String.prototype.charAt(number) : String<br>파라미터로 전달한 index 위치에 해당하는 문자 반환.<br><br>`0 ~ (length - 1)` 까지만 가능. 음수 지원 안됨.\\r\\n\\r\\n```jsx\\r\\nconst str = 'hello'\\r\\nconsole.log(str.charAt(4)) // 'o'\\r\\n```\\r\\n<br>\\r\\n\\r\\n- String.prototype.indexOf(searchString, fromIndex) : number<br>인수로 전달한 문자 또는 문자열을 대상하는 문자열에서 검색해 처음 발견된 곳의 index 반환, 발견 못하면 `-1`<br><br>`fromIndex` 없이 전달하면 처음부터, 같이 전달하면 `fromIndex` 부터\\r\\n\\r\\n```jsx\\r\\nconst str = 'hello world'\\r\\nconsole.log(str.indexOf('wo')) // 6\\r\\nconsole.log(str.indexOf('wo'), 8) // -1 \\r\\n// 8 부터는 'wo'가 없다.\\r\\n```\\r\\n<br>\\r\\n\\r\\n\\r\\n- String.prototype.lastIndexOf(searchString, fromIndex) : number<br>위 `indexOf` 와 동일하지만 검색 방향이 `역방향` 즉, 뒤에서 앞으로 찾는다.\\r\\n<br>\\r\\n\\r\\n- String.prototype.replace(searchValue, replaceValue) : string<br>`searchValue` 를 문자열에서 찾아 `replaceValue` 로 대체시켜 반환.<br><br>첫 발견한 문자열만 대체된다.\\r\\n    * `searchValue` 문자 or 정규 표현식\\r\\n    * `replaceValue` 문자 or 콜백함수\\r\\n\\r\\n```jsx\\r\\nconst str = 'hello world'\\r\\n\\r\\nstr.replace('world', 'javascript') // 'hello javascript'\\r\\nstr.replace('world', '**$&**') // 'hello **world**'\\r\\n```\\r\\n\\r\\n- regex 교체 패\\r\\n\\r\\n| $` | 일치한 문자 이전 값 참조 |\\r\\n| --- | --- |\\r\\n| $' | 일치한 문자 이후 값 참조 |\\r\\n| $+ | 마지막으로 캡처된 값 참조 |\\r\\n| $& | 일치한 문자 결과 전체 참조 |\\r\\n| $_ | 입력(input)된 문자 전체 참조 |\\r\\n| $1~9 | 캡처(Capture)된 값 참조 |\\r\\n\\r\\n- regex\\r\\n\\r\\n| replace(' ','') | 첫번째 공백 제거 |\\r\\n| --- | --- |\\r\\n| replace(/\\\\-/g,'') | 특정문자 제거1 (-) |\\r\\n| replace(/,/g,'') | 특정문자 제거2 (,) |\\r\\n| replace(/^\\\\s+/,'') | 앞의 공백 제거 |\\r\\n| replace(/\\\\s+$/,'') | 뒤의 공백 제거 |\\r\\n| replace(/^\\\\s+|\\\\s+$/g,'') | 앞뒤 공백 제거 |\\r\\n| replace(/\\\\s/g,'') | 문자열 내의 모든 공백 제거 |\\r\\n| replace(/\\\\n/g,'') | n개행 제거 |\\r\\n| replace(/\\\\r/g,'') | 엔터 제거 |\\r\\n\\r\\n```jsx\\r\\nstr.replace(/[a-zA-Z]/g,(n) => {return n === n.toUpperCase() ? n.toLowerCase() :  n.toUpperCase()})\\r\\n```\\r\\n\\r\\n<br>\\r\\n\\r\\n- String.prototype.split(separator, limit) : string[]<br>`separator` 를 기준으로 분리된 각 문자열로 이루어진 배열을 반환.<br><br>인수가 없거나 해당하는 문자가 없다면 원본에 배열을 씌워 반환.\\r\\n\\r\\n```jsx\\r\\nconst str = 'hello world, hello javascript\\r\\nstr.split(' ')    // ['hello', 'world,', 'hello', 'javascript']\\r\\nstr.split('')     // ['h', 'e', 'l', 'l', 'o', ' ', 'w', ... ] 모두 분리\\r\\nstr.split('')     // ['hello world, hello javascript']\\r\\nstr.split(' ', 2) // ['hello', 'world,']\\r\\nstr.split('l')    // ['he', '', 'o wor', 'd, he', '', 'o javascript']\\r\\n```\\r\\n\\r\\n<br>\\r\\n\\r\\n- String.prototype.substring(start, end) : string<br>`start` 부터 `end` 바로 앞 문자까지를 문자열로 전달한다.<br>\\r\\n```jsx\\r\\nconst str = 'ABCDEFG\\r\\nstr.substring(2, 5) // 'CDE'\\r\\nstr.substring(5, 2) // 'CDE' 반대로 넣어도 자동 교환\\r\\nstr.substring(3)    // 'DEFG' end 인수가 없으면 끝까지 잘라냄\\r\\nstr.substring(-2)   // -1, NaN 과 같은 음수는 0으로 취\\r\\n```\\r\\n\\r\\n<br>\\r\\n\\r\\n- String.prototype.slice(start, end) : string<br>`substring` 과 같으나 음수 인수 전달이 안됨.\\r\\n\\r\\n<br>\\r\\n\\r\\n- String.prototype.toLowerCase() : string\\r\\n- String.prototype.toUpperCase() : string<br>문자열의 모든 문자를 소문자, 대문자로 변경한다.\\r\\n\\r\\n<br>\\r\\n\\r\\n- String.prototype.trim() : string<br>문자열의 양 끝 공백문자를 제거한다.\\r\\n\\r\\n```jsx\\r\\nconst str = '   javascript '\\r\\n\\r\\nstr.trim() // 'javascript'\\r\\n```\\r\\n\\r\\n<br>\\r\\n\\r\\n\\r\\n- String.prototype.repeat(number) : string<br>인수로 전달한 숫자 만큼 반복한 문자열을 반환.\\r\\n\\r\\n```jsx\\r\\nconst str = 'hello'\\r\\n\\r\\nstr.repeat(0)   // ''\\r\\nstr.repeat(2)   // 'hellohello'\\r\\nstr.repeat(2.5) // 'hellohello'\\r\\n```\\r\\n\\r\\n<br>\\r\\n\\r\\n- String.prototype.includes(searchValue, position) : boolean<br>`searchValue` 문자열이 포함되어 있는지 검사 후 boolean으로 반환.\",\"categories\":[\"javascript\",\"string\",\"공부\"],\"description\":\"남은 할일 목록\",\"slug\":\"/test3/d/\"}"}}},{"node":{"frontmatter":{"title":"Todo List"},"fields":{"index":"{\"title\":\"Todo List\",\"content\":\"\\r\\n\\r\\n- 댓글기능\\r\\n- 검색최적화(SEO)\\r\\n- 카테고리 만들기\\r\\n\\r\\n김경숙은 최악의 프론트다.\\r\\n\\r\\n![alt alt](./hello.jpg)\\r\\n![alt alt](./page1.png)\\r\\n![alt alt](./thumbnail.jpg)\\r\\n\\r\\n\\r\\n---\\r\\n# 안녕 이건 큰 거\\r\\n## 중간 중간이지\\r\\n### 작은거야 작은거!!\\r\\n---\\r\\n\\r\\n```js\\r\\n// example.js\\r\\nimport styled from \\\"styled-components\\\";\\r\\n\\r\\nexport const Main = styled.main`\\r\\n  margin: 0 auto;\\r\\n  width: 1000px;\\r\\n\\r\\n  color: white;\\r\\n  background-color: #1b1b1b;\\r\\n`;\\r\\n\\r\\nexport const Post = styled.section``;\\r\\n\\r\\nexport const Thumbnail = styled.img``;\\r\\n\\r\\nexport const Content = styled.article``;\\r\\n```\\r\\n\\r\\n```javascript\\r\\nconst str = 'hello'\\r\\nconsole.log(str.length) // 5\\r\\n```\",\"categories\":[\"개발일지\"],\"description\":\"남은 할일 목록\",\"slug\":\"/test/d/\"}"}}},{"node":{"frontmatter":{"title":"King"},"fields":{"index":"{\"title\":\"King\",\"content\":\"\\r\\n\\r\\n- 댓글기능\\r\\n- 검색최적화(SEO)\\r\\n- 카테고리 만들기\\r\\n\\r\\n![alt alt](./hello.jpg)\\r\\n![alt alt](./page1.png)\\r\\n![alt alt](./thumbnail.jpg)\\r\\n\\r\\n\\r\\n---\\r\\n# 안녕 이건 큰 거\\r\\n## 중간 중간이지\\r\\n### 작은거야 작은거!!\\r\\n---\\r\\n\\r\\n```js\\r\\n// example.js\\r\\nimport styled from \\\"styled-components\\\";\\r\\n\\r\\nexport const Main = styled.main`\\r\\n  margin: 0 auto;\\r\\n  width: 1000px;\\r\\n\\r\\n  color: white;\\r\\n  background-color: #1b1b1b;\\r\\n`;\\r\\n\\r\\nexport const Post = styled.section``;\\r\\n\\r\\nexport const Thumbnail = styled.img``;\\r\\n\\r\\nexport const Content = styled.article``;\\r\\n```\\r\\n\\r\\n```javascript\\r\\nconst str = 'hello'\\r\\nconsole.log(str.length) // 5\\r\\n```\",\"description\":\"남은 할일 목록\",\"slug\":\"/test10/d/\"}"}}},{"node":{"frontmatter":{"title":"What follows from here"},"fields":{"index":"{\"title\":\"What follows from here\",\"content\":\"\\r\\n# NOTE: This \\\"post\\\" is based on [Markdown Cheatsheet](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) and is meant to test styling of Gatsby Sites.\\r\\n\\r\\nThis is intended as a quick reference and showcase. For more complete info, see [John Gruber's original spec](http://daringfireball.net/projects/markdown/) and the [Github-flavored Markdown info page](http://github.github.com/github-flavored-markdown/).\\r\\n\\r\\nThis cheatsheet is specifically _Markdown Here's_ [^1] version of Github-flavored Markdown. This differs slightly in styling and syntax from what Github uses, so what you see below might vary a little from what you get in a _Markdown Here_ email, but it should be pretty close [^2]. This paragraph has two footnotes for testing.\\r\\n\\r\\nYou can play around with Markdown on our [live demo page](http://www.markdown-here.com/livedemo.html).\\r\\n\\r\\n(If you're not a Markdown Here user, check out the [Markdown Cheatsheet](./Markdown-Cheatsheet) that is not specific to MDH. But, really, you should also use Markdown Here, because it's awesome. http://markdown-here.com)\\r\\n\\r\\n##### Table of Contents\\r\\n\\r\\n[Headers](#headers)\\r\\n[Emphasis](#emphasis)\\r\\n[Lists](#lists)\\r\\n[Links](#links)\\r\\n[Code and Syntax Highlighting](#code-and-syntax-highlighting)\\r\\n[Tables](#tables)\\r\\n[Blockquotes](#blockquotes)\\r\\n[Inline HTML](#html)\\r\\n[Horizontal Rule](#horizontal-rule)\\r\\n[Line Breaks](#line-breaks)\\r\\n[Videos](#videos)\\r\\n\\r\\n## Headers\\r\\n\\r\\n```javascript\\r\\n# H1\\r\\n## H2\\r\\n### H3\\r\\n#### H4\\r\\n##### H5\\r\\n###### H6\\r\\n\\r\\nAlternatively, for H1 and H2, an underline-ish style:\\r\\n\\r\\nAlt-H1\\r\\n======\\r\\n\\r\\nAlt-H2\\r\\n------\\r\\n```\\r\\n\\r\\n# H1\\r\\n\\r\\n## H2\\r\\n\\r\\n### H3\\r\\n\\r\\n#### H4\\r\\n\\r\\n##### H5\\r\\n\\r\\n###### H6\\r\\n\\r\\nAlternatively, for H1 and H2, an underline-ish style:\\r\\n\\r\\n# Alt-H1\\r\\n\\r\\n## Alt-H2\\r\\n\\r\\n## Emphasis\\r\\n\\r\\n```no-highlight\\r\\nEmphasis, aka italics, with *asterisks* or _underscores_.\\r\\n\\r\\nStrong emphasis, aka bold, with **asterisks** or __underscores__.\\r\\n\\r\\nCombined emphasis with **asterisks and _underscores_**.\\r\\n\\r\\nStrikethrough uses two tildes. ~~Scratch this.~~\\r\\n```\\r\\n\\r\\nEmphasis, aka italics, with _asterisks_ or _underscores_.\\r\\n\\r\\nStrong emphasis, aka bold, with **asterisks** or **underscores**.\\r\\n\\r\\nCombined emphasis with **asterisks and _underscores_**.\\r\\n\\r\\nStrikethrough uses two tildes. ~~Scratch this.~~\\r\\n\\r\\n## Lists\\r\\n\\r\\n```no-highlight\\r\\n1. First ordered list item\\r\\n2. Another item\\r\\n  * Unordered sub-list.\\r\\n1. Actual numbers don't matter, just that it's a number\\r\\n  1. Ordered sub-list\\r\\n4. And another item.\\r\\n\\r\\n   Some text that should be aligned with the above item.\\r\\n\\r\\n* Unordered list can use asterisks\\r\\n- Or minuses\\r\\n+ Or pluses\\r\\n```\\r\\n\\r\\n1. First ordered list item\\r\\n\\r\\n2. Another item\\r\\n\\r\\n   - Unordered sub-list.\\r\\n\\r\\n3. Actual numbers don't matter, just that it's a number\\r\\n\\r\\n   1. Ordered sub-list\\r\\n\\r\\n4. And another item.\\r\\n\\r\\n   Some text that should be aligned with the above item.\\r\\n\\r\\n- Unordered list can use asterisks\\r\\n\\r\\n- Or minuses\\r\\n\\r\\n- Or pluses\\r\\n\\r\\n## Links\\r\\n\\r\\nThere are two ways to create links.\\r\\n\\r\\n```no-highlight\\r\\n[I'm an inline-style link](https://www.google.com)\\r\\n\\r\\nOr leave it empty and use the [link text itself]\\r\\n```\\r\\n\\r\\n[I'm an inline-style link](https://www.google.com)\\r\\n\\r\\nOr leave it empty and use the [link text itself]\\r\\n\\r\\nFully qualified URLs will automatically be turned into links.\\r\\nhttp://www.example.com\\r\\n\\r\\n## Code and Syntax Highlighting\\r\\n\\r\\nCode blocks are part of the Markdown spec, but syntax highlighting isn't. However, many renderers -- like Github's and _Markdown Here_ -- support syntax highlighting. _Markdown Here_ supports highlighting for dozens of languages (and not-really-languages, like diffs and HTTP headers); to see the complete list, and how to write the language names, see the [highlight.js demo page](http://softwaremaniacs.org/media/soft/highlight/test.html).\\r\\n\\r\\n```no-highlight\\r\\nInline `code` has `back-ticks around` it.\\r\\n```\\r\\n\\r\\nInline `code` has `back-ticks around` it.\\r\\n\\r\\n## inline `code` has\\r\\n\\r\\nAgain, to see what languages are available for highlighting, and how to write those language names, see the [highlight.js demo page](http://softwaremaniacs.org/media/soft/highlight/test.html).\\r\\n\\r\\n## Tables\\r\\n\\r\\nTables aren't part of the core Markdown spec, but they are part of GFM and _Markdown Here_ supports them. They are an easy way of adding tables to your email -- a task that would otherwise require copy-pasting from another application.\\r\\n\\r\\n```no-highlight\\r\\nColons can be used to align columns.\\r\\n\\r\\n| Tables        | Are           | Cool  |\\r\\n| ------------- |:-------------:| -----:|\\r\\n| col 3 is      | right-aligned | $1600 |\\r\\n| col 2 is      | centered      |   $12 |\\r\\n| zebra stripes | are neat      |    $1 |\\r\\n\\r\\nThe outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown.\\r\\n\\r\\nMarkdown | Less | Pretty\\r\\n--- | --- | ---\\r\\n*Still* | `renders` | **nicely**\\r\\n1 | 2 | 3\\r\\n```\\r\\n\\r\\nColons can be used to align columns.\\r\\n\\r\\n| Tables        |      Are      |  Cool |\\r\\n| ------------- | :-----------: | ----: |\\r\\n| col 3 is      | right-aligned | $1600 |\\r\\n| col 2 is      |   centered    |   $12 |\\r\\n| zebra stripes |   are neat    |    $1 |\\r\\n\\r\\nThe outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown.\\r\\n\\r\\n| Markdown | Less      | Pretty     |\\r\\n| -------- | --------- | ---------- |\\r\\n| _Still_  | `renders` | **nicely** |\\r\\n| 1        | 2         | 3          |\\r\\n\\r\\n## Blockquotes\\r\\n\\r\\n```no-highlight\\r\\n> Blockquotes are very handy in email to emulate reply text.\\r\\n> This line is part of the same quote.\\r\\n\\r\\nQuote break.\\r\\n\\r\\n> This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote.\\r\\n```\\r\\n\\r\\n> Blockquotes are very handy in email to emulate reply text.\\r\\n> This line is part of the same quote.\\r\\n\\r\\nQuote break.\\r\\n\\r\\n> This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can _put_ **Markdown** into a blockquote.\\r\\n\\r\\n## Inline HTML\\r\\n\\r\\nYou can also use raw HTML in your Markdown, and it'll mostly work pretty well.\\r\\n\\r\\n```no-highlight\\r\\n<dl>\\r\\n  <dt>Definition list</dt>\\r\\n  <dd>Is something people use sometimes.</dd>\\r\\n\\r\\n  <dt>Markdown in HTML</dt>\\r\\n  <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd>\\r\\n</dl>\\r\\n```\\r\\n\\r\\n<dl>\\r\\n  <dt>Definition list</dt>\\r\\n  <dd>Is something people use sometimes.</dd>\\r\\n\\r\\n## Horizontal Rule\\r\\n\\r\\n```\\r\\nThree or more...\\r\\n\\r\\n---\\r\\n\\r\\nHyphens\\r\\n\\r\\n***\\r\\n\\r\\nAsterisks\\r\\n\\r\\n___\\r\\n\\r\\nUnderscores\\r\\n```\\r\\n\\r\\nThree or more...\\r\\n\\r\\n------\\r\\n\\r\\nHyphens\\r\\n\\r\\n------\\r\\n\\r\\nAsterisks\\r\\n\\r\\n------\\r\\n\\r\\nUnderscores\\r\\n\\r\\n## Line Breaks\\r\\n\\r\\nMy basic recommendation for learning how line breaks work is to experiment and discover -- hit &lt;Enter&gt; once (i.e., insert one newline), then hit it twice (i.e., insert two newlines), see what happens. You'll soon learn to get what you want. \\\"Markdown Toggle\\\" is your friend.\\r\\n\\r\\nHere are some things to try out:\\r\\n\\r\\n```\\r\\nHere's a line for us to start with.\\r\\n\\r\\nThis line is separated from the one above by two newlines, so it will be a *separate paragraph*.\\r\\n\\r\\nThis line is also a separate paragraph, but...\\r\\nThis line is only separated by a single newline, so it's a separate line in the *same paragraph*.\\r\\n```\\r\\n\\r\\nHere's a line for us to start with.\\r\\n\\r\\nThis line is separated from the one above by two newlines, so it will be a _separate paragraph_.\\r\\n\\r\\nThis line is also begins a separate paragraph, but...\\r\\nThis line is only separated by a single newline, so it's a separate line in the _same paragraph_.\\r\\n\\r\\n(Technical note: _Markdown Here_ uses GFM line breaks, so there's no need to use MD's two-space line breaks.)\\r\\n\\r\\n## Videos\\r\\n\\r\\nIt is easy to embed responsive external videos:\\r\\n\\r\\n`youtube: https://www.youtube.com/watch?v=y588qNiCZZo`\\r\\n\\r\\n```no-highlight\\r\\n`youtube: https://www.youtube.com/watch?v=y588qNiCZZo`\\r\\n```\\r\\n\\r\\n------\\r\\n\\r\\n## Code Highlighting\\r\\n\\r\\n```javascript\\r\\n    // In your gatsby-config.js\\r\\n    // Let's make this line very long so that our container has to scroll its overflow…\\r\\n    plugins: [\\r\\n      {\\r\\n        resolve: `gatsby-transformer-remark`,\\r\\n        options: {\\r\\n          plugins: [\\r\\n            {\\r\\n              resolve: `gatsby-remark-images`,\\r\\n              options: {\\r\\n                maxWidth: 756,\\r\\n              },\\r\\n            },\\r\\n            {\\r\\n              resolve: `gatsby-remark-responsive-iframe`,\\r\\n              options: {\\r\\n                wrapperStyle: `margin-bottom: 1.0725rem`,\\r\\n              },\\r\\n            },\\r\\n            `gatsby-remark-copy-linked-files`,\\r\\n            `gatsby-remark-smartypants`,\\r\\n            `gatsby-remark-prismjs`,\\r\\n          ]\\r\\n        }\\r\\n      }\\r\\n    ]\\r\\n```\\r\\n\\r\\nLet's do something crazy and add a list with another code example:\\r\\n\\r\\n- **A list item**\\r\\n\\r\\n  …and a paragraph! In my younger and more vulnerable years my father gave me\\r\\n  some advice that I’ve been turning over in my mind ever since.\\r\\n\\r\\n  1. A nested numbered list\\r\\n  2. “Whenever you feel like criticizing any one,” he told me, “just remember\\r\\n     that all the people in this world haven’t had the advantages that you’ve\\r\\n     had.”\\r\\n\\r\\n- Roger that, now back to topic: _Highlighted code blocks work here, too:_\\r\\n\\r\\n  ```css{10,13}\\r\\n  .clearfix:after {\\r\\n  \\tvisibility: hidden;\\r\\n  \\tdisplay: block;\\r\\n  \\tfont-size: 0;\\r\\n  \\tcontent: \\\" \\\";\\r\\n  \\tclear: both;\\r\\n  \\theight: 0;\\r\\n  \\t}\\r\\n  .clearfix { display: inline-table; }\\r\\n  /* Hides from IE-mac \\\\*/\\r\\n  * html .clearfix { height: 1%; }\\r\\n  .clearfix { display: block; }\\r\\n  /* End hide from IE-mac */\\r\\n  ```\\r\\n\\r\\n  Wow, \\\"IE-mac\\\"?\\r\\n  [Yeah, that was a thing](https://en.wikipedia.org/wiki/Internet_Explorer_for_Mac)\\r\\n  back in the day … a good one at the time, too:\\r\\n\\r\\n  > Initial versions were developed from the same code base as Internet Explorer\\r\\n  > for Windows. Later versions diverged, particularly with the release of\\r\\n  > version 5 which included the cutting edge,\\r\\n  > [fault-tolerant](https://en.wikipedia.org/wiki/Fault-tolerant) and highly\\r\\n  > standards-compliant\\r\\n  > [Tasman](<https://en.wikipedia.org/wiki/Tasman_(layout_engine)>) >\\r\\n  > [layout engine](https://en.wikipedia.org/wiki/Layout_engine).\\r\\n\\r\\n  Source: https://en.wikipedia.org/wiki/Internet_Explorer_for_Mac\\r\\n\\r\\n- **The last list item** –- no more list items after this one, pinky swear!\\r\\n\\r\\n# Some more prismjs Shell Highlights\\r\\n\\r\\nI found the solution to [this issue here](https://github.com/matthewjweaver/mjw-toolbox/issues/75):\\r\\n\\r\\n```shell\\r\\nrm /usr/local/lib/opensc-pkcs11.so\\r\\ncp -a $OPENSC_PK /usr/local/lib/opensc-pkcs11.so\\r\\nssh-add -s /usr/local/lib/opensc-pkcs11.so\\r\\n```\\r\\n\\r\\nLine break.\\r\\n\\r\\n```shell\\r\\ngpg --edit-key your@email.com\\r\\n```\\r\\n\\r\\nThat is it!\\r\\n\\r\\n---\\r\\n\\r\\n[^1]: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\\r\\n[^2]: Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\"categories\":[\"markdown\",\"test\"],\"description\":\"남은 할일 목록\",\"slug\":\"/test2/d/\"}"}}},{"node":{"frontmatter":{"title":"되는건가?"},"fields":{"index":"{\"title\":\"되는건가?\",\"content\":\"\\r\\n\\r\\n- 댓글기능\\r\\n- 검색최적화(SEO)\\r\\n- 카테고리 만들기\\r\\n\\r\\n![alt alt](./hello.jpg)\\r\\n![alt alt](./page1.png)\\r\\n![alt alt](./thumbnail.jpg)\\r\\n\\r\\n\\r\\n---\\r\\n# 안녕 이건 큰 거\\r\\n## 중간 중간이지\\r\\n### 작은거야 작은거!!\\r\\n---\\r\\n\\r\\n```js\\r\\n// example.js\\r\\nimport styled from \\\"styled-components\\\";\\r\\n\\r\\nexport const Main = styled.main`\\r\\n  margin: 0 auto;\\r\\n  width: 1000px;\\r\\n\\r\\n  color: white;\\r\\n  background-color: #1b1b1b;\\r\\n`;\\r\\n\\r\\nexport const Post = styled.section``;\\r\\n\\r\\nexport const Thumbnail = styled.img``;\\r\\n\\r\\nexport const Content = styled.article``;\\r\\n```\\r\\n\\r\\n```javascript\\r\\nconst str = 'hello'\\r\\nconsole.log(str.length) // 5\\r\\n```\",\"categories\":[\"된다\",\"hard\"],\"description\":\"남은 할일 목록\",\"slug\":\"/test5/d/\"}"}}},{"node":{"frontmatter":{"title":"테스트용 제목입니다."},"fields":{"index":"{\"title\":\"테스트용 제목입니다.\",\"content\":\"\\r\\n\\r\\n- 댓글기능\\r\\n- 검색최적화(SEO)\\r\\n- 카테고리 만들기\\r\\n\\r\\n![alt alt](./hello.jpg)\\r\\n![alt alt](./page1.png)\\r\\n![alt alt](./thumbnail.jpg)\\r\\n\\r\\n\\r\\n---\\r\\n# 안녕 이건 큰 거\\r\\n## 중간 중간이지\\r\\n### 작은거야 작은거!!\\r\\n---\\r\\n\\r\\n```js\\r\\n// example.js\\r\\nimport styled from \\\"styled-components\\\";\\r\\n\\r\\nexport const Main = styled.main`\\r\\n  margin: 0 auto;\\r\\n  width: 1000px;\\r\\n\\r\\n  color: white;\\r\\n  background-color: #1b1b1b;\\r\\n`;\\r\\n\\r\\nexport const Post = styled.section``;\\r\\n\\r\\nexport const Thumbnail = styled.img``;\\r\\n\\r\\nexport const Content = styled.article``;\\r\\n```\\r\\n\\r\\n```javascript\\r\\nconst str = 'hello'\\r\\nconsole.log(str.length) // 5\\r\\n```\",\"categories\":[\"javascript\"],\"description\":\"남은 할일 목록\",\"slug\":\"/test4/d/\"}"}}},{"node":{"frontmatter":{"title":"그럴 듯한 제목1"},"fields":{"index":"{\"title\":\"그럴 듯한 제목1\",\"content\":\"\\r\\n\\r\\n- 댓글기능\\r\\n- 검색최적화(SEO)\\r\\n- 카테고리 만들기\\r\\n\\r\\n![alt alt](./hello.jpg)\\r\\n![alt alt](./page1.png)\\r\\n![alt alt](./thumbnail.jpg)\\r\\n\\r\\n\\r\\n---\\r\\n# 안녕 이건 큰 거\\r\\n## 중간 중간이지\\r\\n### 작은거야 작은거!!\\r\\n---\\r\\n\\r\\n```js\\r\\n// example.js\\r\\nimport styled from \\\"styled-components\\\";\\r\\n\\r\\nexport const Main = styled.main`\\r\\n  margin: 0 auto;\\r\\n  width: 1000px;\\r\\n\\r\\n  color: white;\\r\\n  background-color: #1b1b1b;\\r\\n`;\\r\\n\\r\\nexport const Post = styled.section``;\\r\\n\\r\\nexport const Thumbnail = styled.img``;\\r\\n\\r\\nexport const Content = styled.article``;\\r\\n```\\r\\n\\r\\n```javascript\\r\\nconst str = 'hello'\\r\\nconsole.log(str.length) // 5\\r\\n```\",\"description\":\"남은 할일 목록\",\"slug\":\"/test7/d/\"}"}}},{"node":{"frontmatter":{"title":"asap"},"fields":{"index":"{\"title\":\"asap\",\"content\":\"\\r\\n\\r\\n- 댓글기능\\r\\n- 검색최적화(SEO)\\r\\n- 카테고리 만들기\\r\\n\\r\\n![alt alt](./hello.jpg)\\r\\n![alt alt](./page1.png)\\r\\n![alt alt](./thumbnail.jpg)\\r\\n\\r\\n\\r\\n---\\r\\n# 안녕 이건 큰 거\\r\\n## 중간 중간이지\\r\\n### 작은거야 작은거!!\\r\\n---\\r\\n\\r\\n```js\\r\\n// example.js\\r\\nimport styled from \\\"styled-components\\\";\\r\\n\\r\\nexport const Main = styled.main`\\r\\n  margin: 0 auto;\\r\\n  width: 1000px;\\r\\n\\r\\n  color: white;\\r\\n  background-color: #1b1b1b;\\r\\n`;\\r\\n\\r\\nexport const Post = styled.section``;\\r\\n\\r\\nexport const Thumbnail = styled.img``;\\r\\n\\r\\nexport const Content = styled.article``;\\r\\n```\\r\\n\\r\\n```javascript\\r\\nconst str = 'hello'\\r\\nconsole.log(str.length) // 5\\r\\n```\",\"description\":\"남은 할일 목록\",\"slug\":\"/test9/d/\"}"}}},{"node":{"frontmatter":{"title":"화나게 하지마세요"},"fields":{"index":"{\"title\":\"화나게 하지마세요\",\"content\":\"\\r\\n\\r\\n- 댓글기능\\r\\n- 검색최적화(SEO)\\r\\n- 카테고리 만들기\\r\\n\\r\\n![alt alt](./hello.jpg)\\r\\n![alt alt](./page1.png)\\r\\n![alt alt](./thumbnail.jpg)\\r\\n\\r\\n\\r\\n---\\r\\n# 안녕 이건 큰 거\\r\\n## 중간 중간이지\\r\\n### 작은거야 작은거!!\\r\\n---\\r\\n\\r\\n```js\\r\\n// example.js\\r\\nimport styled from \\\"styled-components\\\";\\r\\n\\r\\nexport const Main = styled.main`\\r\\n  margin: 0 auto;\\r\\n  width: 1000px;\\r\\n\\r\\n  color: white;\\r\\n  background-color: #1b1b1b;\\r\\n`;\\r\\n\\r\\nexport const Post = styled.section``;\\r\\n\\r\\nexport const Thumbnail = styled.img``;\\r\\n\\r\\nexport const Content = styled.article``;\\r\\n```\\r\\n\\r\\n```javascript\\r\\nconst str = 'hello'\\r\\nconsole.log(str.length) // 5\\r\\n```\",\"description\":\"남은 할일 목록\",\"slug\":\"/test6/d/\"}"}}},{"node":{"frontmatter":{"title":"geu Rur deot han"},"fields":{"index":"{\"title\":\"geu Rur deot han\",\"content\":\"\\r\\n\\r\\n- 댓글기능\\r\\n- 검색최적화(SEO)\\r\\n- 카테고리 만들기\\r\\n\\r\\n![alt alt](./hello.jpg)\\r\\n![alt alt](./page1.png)\\r\\n![alt alt](./thumbnail.jpg)\\r\\n\\r\\n\\r\\n---\\r\\n# 안녕 이건 큰 거\\r\\n## 중간 중간이지\\r\\n### 작은거야 작은거!!\\r\\n---\\r\\n\\r\\n```js\\r\\n// example.js\\r\\nimport styled from \\\"styled-components\\\";\\r\\n\\r\\nexport const Main = styled.main`\\r\\n  margin: 0 auto;\\r\\n  width: 1000px;\\r\\n\\r\\n  color: white;\\r\\n  background-color: #1b1b1b;\\r\\n`;\\r\\n\\r\\nexport const Post = styled.section``;\\r\\n\\r\\nexport const Thumbnail = styled.img``;\\r\\n\\r\\nexport const Content = styled.article``;\\r\\n```\\r\\n\\r\\n```javascript\\r\\nconst str = 'hello'\\r\\nconsole.log(str.length) // 5\\r\\n```\",\"description\":\"남은 할일 목록\",\"slug\":\"/test8/d/\"}"}}}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}